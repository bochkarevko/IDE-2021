//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Pascal.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class Pascal : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IDENTIFIER=1, COMMENT_1=2, COMMENT_2=3, SIGN=4, SNUMBER=5, RNUMBER_1=6, 
		RNUMBER_2=7, SCALE=8, RNUMSC_1=9, RNUMSC_2=10, NUMBER=11, CHARSTR=12, 
		WHITESPACE=13, SYMBOL=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"IDENTIFIER", "COMMENT_1", "COMMENT_2", "DIGITSEQ", "SIGN", "SNUMBER", 
		"RNUMBER_1", "RNUMBER_2", "SCALE", "RNUMSC_1", "RNUMSC_2", "NUMBER", "CHARSTR", 
		"WHITESPACE", "SYMBOL"
	};


	public Pascal(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Pascal(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "IDENTIFIER", "COMMENT_1", "COMMENT_2", "SIGN", "SNUMBER", "RNUMBER_1", 
		"RNUMBER_2", "SCALE", "RNUMSC_1", "RNUMSC_2", "NUMBER", "CHARSTR", "WHITESPACE", 
		"SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pascal.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Pascal() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x10', 'g', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '$', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\'', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '-', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x30', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', '\x37', '\n', '\x4', '\f', '\x4', '\xE', '\x4', ':', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x6', '\x5', '?', 
		'\n', '\x5', '\r', '\x5', '\xE', '\x5', '@', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', ']', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '`', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '.', '\x38', '^', '\x2', 
		'\x11', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x2', '\v', '\x6', 
		'\r', '\a', '\xF', '\b', '\x11', '\t', '\x13', '\n', '\x15', '\v', '\x17', 
		'\f', '\x19', '\r', '\x1B', '\xE', '\x1D', '\xF', '\x1F', '\x10', '\x3', 
		'\x2', '\t', '\x5', '\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', 
		'\x6', '\x2', '\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', '|', 
		'\x3', '\x2', '\x32', ';', '\x4', '\x2', '-', '-', '/', '/', '\x4', '\x2', 
		'G', 'G', 'g', 'g', '\x4', '\x2', '\v', '\f', '\xF', '\xF', '\x5', '\x2', 
		'\x32', ';', '\x43', '\\', '\x63', '|', '\x2', 'j', '\x2', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x5', '(', '\x3', '\x2', '\x2', '\x2', 
		'\a', '\x34', '\x3', '\x2', '\x2', '\x2', '\t', '>', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\x42', '\x3', '\x2', '\x2', '\x2', '\r', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\xF', 'G', '\x3', '\x2', '\x2', '\x2', '\x11', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x13', 'N', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'R', '\x3', '\x2', '\x2', '\x2', '\x17', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x19', 'X', '\x3', '\x2', '\x2', '\x2', '\x1B', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x63', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '!', '%', '\t', '\x2', '\x2', '\x2', '\"', '$', '\t', 
		'\x3', '\x2', '\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', '$', '\'', 
		'\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', 
		'&', '\x3', '\x2', '\x2', '\x2', '&', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'\'', '%', '\x3', '\x2', '\x2', '\x2', '(', ')', '\a', '*', '\x2', '\x2', 
		')', '*', '\a', ',', '\x2', '\x2', '*', '.', '\x3', '\x2', '\x2', '\x2', 
		'+', '-', '\v', '\x2', '\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', 
		'-', '\x30', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\a', ',', '\x2', '\x2', '\x32', '\x33', '\a', '+', '\x2', '\x2', '\x33', 
		'\x6', '\x3', '\x2', '\x2', '\x2', '\x34', '\x38', '\a', '}', '\x2', '\x2', 
		'\x35', '\x37', '\v', '\x2', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ';', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\a', '\x7F', '\x2', '\x2', '<', '\b', '\x3', '\x2', 
		'\x2', '\x2', '=', '?', '\t', '\x4', '\x2', '\x2', '>', '=', '\x3', '\x2', 
		'\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\n', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\t', '\x5', '\x2', '\x2', '\x43', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x5', '\v', '\x6', 
		'\x2', '\x45', '\x46', '\x5', '\t', '\x5', '\x2', '\x46', '\xE', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\x5', '\t', '\x5', '\x2', 'H', 'I', '\a', 
		'\x30', '\x2', '\x2', 'I', 'J', '\x5', '\t', '\x5', '\x2', 'J', '\x10', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x5', '\t', '\x5', '\x2', 'L', 
		'M', '\a', '\x30', '\x2', '\x2', 'M', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\t', '\x6', '\x2', '\x2', 'O', 'P', '\x5', '\v', '\x6', '\x2', 
		'P', 'Q', '\x5', '\t', '\x5', '\x2', 'Q', '\x14', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x5', '\xF', '\b', '\x2', 'S', 'T', '\x5', '\x13', '\n', 
		'\x2', 'T', '\x16', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x5', '\x11', 
		'\t', '\x2', 'V', 'W', '\x5', '\x13', '\n', '\x2', 'W', '\x18', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\x5', '\t', '\x5', '\x2', 'Y', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '^', '\a', ')', '\x2', '\x2', '[', ']', 
		'\v', '\x2', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', 
		'`', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', 
		'^', '\\', '\x3', '\x2', '\x2', '\x2', '_', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', ')', 
		'\x2', '\x2', '\x62', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\t', '\a', '\x2', '\x2', '\x64', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\t', '\b', '\x2', '\x2', '\x66', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x2', '%', '.', '\x38', '@', '^', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
